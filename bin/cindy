#!/usr/bin/env ruby

require 'cindy/all'
require 'cindy/cli'

require 'readline'
require 'shellwords'

cli = Cindy::CLI.new

Readline.completion_append_character = " "
Readline.completion_proc = proc do |s|
    args = Shellwords.split Readline.line_buffer[0, Readline.point]
    args.pop unless Readline.line_buffer.end_with? Readline.completion_append_character
    (
        case args
        when []
            %w(reload environment template)
        when %w(environment), %w(env)
            %w(list)
        when %w(template), %w(tpl)
            %w(list) + cli.templates
        else
            if 'template' == Cindy::CLI::ARGS_ALIASES[args[0]] && args.length >= 2
                tplname = args.delete_at 1
                if 1 == args.length
                    %w(environment) unless 'list' == tplname
                elsif 'environment' == Cindy::CLI::ARGS_ALIASES[args[1]]
                    case args.length
                    when 2
                        cli.environments
                    when 3
                        %w(deploy print details)
                    end
                end
            end
        end || []
    ).select { |v| v.start_with? s }
end

CINDY_EXCEPTIONS = ObjectSpace.each_object(Class).select { |v| v.ancestors.include?(Exception) && 'Cindy' == v.name.split('::').first }

if ARGV.any?
    cli.parse ARGV
else
    while line = Readline.readline('# ', true)
        begin
            cli.parse Shellwords.split(line)
        rescue => e
            raise unless CINDY_EXCEPTIONS.include? e.class
            puts "[ ERR ] #{e}"
        end
    end
end
